name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

      # Cache dependencies to speed up build times
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          app-service/.cargo
          app-service/target/
          auth-service/.cargo
          auth-service/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Generate version tag
      id: version
      run: echo "VERSION=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Install Rust
      run: rustup update stable && rustup default stable

    - name: Build and test app-service code
      working-directory: ./app-service
      run: |
        cargo build --verbose
        cargo test --verbose

    - name: Build and test auth-service code
      working-directory: ./auth-service
      run: |
        cargo build --verbose
        cargo test --verbose

      # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/bake-action@v2.3.0
      with:
        push: true
        files: ./docker-bake.hcl
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max
          app-service.tags=mrsmith9ja/app-service:latest,mrsmith9ja/app-service:${{ steps.version.outputs.VERSION }}
          auth-service.tags=mrsmith9ja/auth-service:latest,mrsmith9ja/auth-service:${{ steps.version.outputs.VERSION }}



  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

      # Generate version tag (same as build job)
    - name: Generate version tag
      id: version
      run: echo "VERSION=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Set up Kubernetes configuration
    - name: Set up kubeconfig
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}

      # Update and apply Kubernetes deployment with version tag
    - name: Deploy to Kubernetes
      run: |
        # Extract just the tag from the output (without the image name)
        echo "Using version tag: ${{ steps.version.outputs.VERSION }}"
        echo "Using version tag: $VERSION_TAG"
        
        # Update the image references with version tags
        sed -i "s|image: mrsmith9ja/app-service|image: mrsmith9ja/app-service:${{ steps.version.outputs.VERSION }}|g" k8/app-service.deployment.yml
        sed -i "s|image: mrsmith9ja/auth-service|image: mrsmith9ja/auth-service:${{ steps.version.outputs.VERSION }}|g" k8/app-service.deployment.yml

        # Apply namespace
        kubectl apply -f k8/namespace.yml
        
        # Wait for namespace to be ready
        kubectl wait --for=condition=Ready ns/live-bootcamp-proj
        
        # Apply service
        kubectl apply -f k8/service.yml
        
        # Wait for service to be ready
        kubectl wait --for=condition=Ready svc/app-service

        # Apply deployment
        kubectl apply -f k8/app-service.deployment.yml
        
        # Wait for deployment to be ready
        kubectl wait --for=condition=Ready deployment/app-service

