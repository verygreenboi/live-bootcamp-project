name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

      # Cache dependencies to speed up build times
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          app-service/.cargo
          app-service/target/
          auth-service/.cargo
          auth-service/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

      # Generate metadata for app-service
    - name: Docker meta for app-service
      id: meta-app
      uses: docker/metadata-action@v5
      with:
        images: mrsmith9ja/app-service
        tags: |
          type=raw,value=latest
          type=raw,value={{date 'YYYYMMDD'}}-{{sha}}
          type=sha,format=short

      # Generate metadata for auth-service
    - name: Docker meta for auth-service
      id: meta-auth
      uses: docker/metadata-action@v5
      with:
        images: mrsmith9ja/auth-service
        tags: |
          type=raw,value=latest
          type=raw,value={{date 'YYYYMMDD'}}-{{sha}}
          type=sha,format=short


    - name: Install Rust
      run: rustup update stable && rustup default stable

    - name: Build and test app-service code
      working-directory: ./app-service
      run: |
        cargo build --verbose
        cargo test --verbose

    - name: Build and test auth-service code
      working-directory: ./auth-service
      run: |
        cargo build --verbose
        cargo test --verbose

      # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/bake-action@v2.3.0
      with:
        push: true
        files: |
          compose.yml
          compose.override.yml
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max          
          app-service.tags=${{ steps.meta-app.outputs.tags }}
          auth-service.tags=${{ steps.meta-auth.outputs.tags }}


  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2


      # Generate the same metadata for deployment
    - name: Set version for deployment
      id: meta-deploy
      uses: docker/metadata-action@v5
      with:
        images: mrsmith9ja/app-service  # We just need the tag format, not the actual image name
        tags: |
          type=raw,value={{date 'YYYYMMDD'}}-{{sha}}

    # Set up Kubernetes configuration
    - name: Set up kubeconfig
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}

      # Update and apply Kubernetes deployment with version tag
    - name: Deploy to Kubernetes
      run: |
        # Extract just the tag from the output (without the image name)
        VERSION_TAG=$(echo "${{ steps.meta-deploy.outputs.tags }}" | grep -o '[^:]*$' | head -1)
        echo "Using version tag: $VERSION_TAG"
        
        # Update the image references with version tags
        sed -i "s|image: mrsmith9ja/app-service|image: mrsmith9ja/app-service:$VERSION_TAG|g" k8/app-service.deployment.yml
        sed -i "s|image: mrsmith9ja/auth-service|image: mrsmith9ja/auth-service:$VERSION_TAG|g" k8/app-service.deployment.yml

        # Apply namespace
        kubectl apply -f k8/namespace.yml
        
        # Wait for namespace to be ready
        kubectl wait --for=condition=Ready ns/live-bootcamp-proj

        # Apply deployment
        kubectl apply -f k8/app-service.deployment.yml
        
        # Wait for deployment to be ready
        kubectl wait --for=condition=Ready deployment/app-service

